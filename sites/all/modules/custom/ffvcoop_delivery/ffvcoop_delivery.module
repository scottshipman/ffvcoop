

<?php
/**
 * FFVCOOP Delivery
 *
 */


/**
 *  Implements block info().
 */
function ffvcoop_delivery_block_info() {
    $blocks = array();
    $blocks['ffvcoop_delivery_form'] = array(
        'info' => t('Add Delivery to Cart'),
    );

    return $blocks;
}

/**
 * Implements hook_block_view().
 * Generate calendar by Year Block
 */
function ffvcoop_delivery_block_view($delta='') {
    $block = array();

    switch($delta) {
        case 'ffvcoop_delivery_form' :
            $block['content'] = add_delivery_to_cart_construct();
            break;
    }

    return $block;
}


function add_delivery_to_cart_construct() {
    $show_quantity = FALSE;
    $data = array();
  GLOBAL $user;
  $uid = $user->uid;
  if(!$cart = commerce_cart_order_load($uid)) {return FALSE;};
  $cart_li = count($cart->commerce_line_items);
  //check to see if a delivery already exists in cart and if so dont show block
  $order=commerce_order_load($cart->order_id);
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    $type = $line_item_wrapper->commerce_product->product_id->value();
    $product_item = commerce_product_load($type);
    $product_type = $product_item->type;
    if($product_type=='delivery'){
      return FALSE;
    }
  }

    // get current CART and see if line item for delivery exists. If so, do not show this block.
  if($cart_li > 0){
    if($delivery = get_delivery_products()) {
        $product = commerce_product_load($delivery);
        $line_item = commerce_product_line_item_new($product, 1, NULL, $data, 'product');
        $wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
        $line_item->data['context']['product_ids']=array(0=>$delivery);
        $context=array();
        $form = drupal_get_form('commerce_cart_add_to_cart_form', $line_item);
        $form['submit']['#value'] = 'Add Delivery to your Order';
        return "<div id='add-delivery'>" . drupal_render($form) . "</div>";
    } else {
        return NULL;
    }
  } else {
    return NULL;
  }
}
//commerce_cart_add_to_cart_form($form, &$form_state, $line_item, $show_quantity, $context)

function get_delivery_products(){
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'commerce_product')
        ->entityCondition('bundle', 'delivery')
        ->propertyCondition('status', 1)
        ->range(0,1);

    $result = $query->execute();
    if(isset($result['commerce_product'])){
        $entity_ids = array_keys($result['commerce_product']);
        if($entity_ids) {
            return $entity_ids[0];}
        else {
            return FALSE;
        }
    }
}

// Rules about  Delivery

/*
 * Hooks commerce_order_presave
 * Adds a pickup date value to an order before saving.
 */
function ffvcoop_delivery_commerce_cart_product_add($order, $product, $quantity, $line_item) {

  /*$pickup_date = get_next_pickup_date(); // get next pickup date

  $wrapper = entity_metadata_wrapper('commerce_order', $order->order_number);
  $wrapper->field_week_date=$pickup_date;
  $wrapper->save();
  */
}

/**
 * Implement hook_rules_action_info().
 */
function ffvcoop_delivery_rules_action_info() {
  $actions = array();

  $actions['ffvcoop_delivery_remove_delivery'] = array(
    'label' => t('Remove delivery products from an order'),
    'parameter' => array(
      'commerce_order' => array(
        'type' => 'commerce_order',
        'label' => t('Affected Order'),
      ),
    ),
    'group' => t('FFVCOOP'),
    'callbacks' => array(
      'execute' => 'ffvcoop_delivery_rules_remove_delivery',
    ),
  );
  return $actions;
}


/**
 * Rules action: remove delivery item from a cart order.
 */
function ffvcoop_delivery_rules_remove_delivery($order) {
  ffvcoop_delivery_order_remove_delivery($order);
}

/**
 * Deletes delivery product line item from a shopping cart order.
 *
 * @param $order
 *   The shopping cart order to empty.
 *
 * @return
 *   The order with the delivery line items all removed.
 */
function ffvcoop_delivery_order_remove_delivery($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Build an array of product line item IDs.
  $line_item_ids = array();
  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    $type = $line_item_wrapper->commerce_product->product_id->value();
    $product_item = commerce_product_load($type);
    $product_type = $product_item->type;
    if($product_type=='delivery'){
      $line_item_ids[] = $line_item_wrapper->line_item_id->value();
    }
  }

  // Delete each line item one by one from the order. This is done this way
  // instead of unsetting each as we find it to ensure that changing delta
  // values don't prevent an item from being removed from the order.
  foreach ($line_item_ids as $line_item_id) {
    $order = commerce_cart_order_product_line_item_delete($order, $line_item_id, TRUE);
  }

  // Save and return the order.
  commerce_order_save($order);

  return $order;
}

function ffvcoop_delivery_form_alter($form, &$form_state){
    if($form['#form_id']=='commerce_checkout_form_checkout'){
        $form['customer_profile_shipping']['#title'] = 'Delivery Information';
        $form['customer_profile_shipping']['commerce_customer_profile_copy']['#title'] = 'My <em class="placeholder">Delivery information</em> is the same as my <em class="placeholder">Billing information</em>.';
        drupal_add_js('jQuery(document).ready(function ($) {
            $("fieldset.customer_profile_shipping a").text("Delivery Information");
            $("div.form-item-customer-profile-shipping-commerce-customer-profile-copy label").text("My Delivery information is the same as my Billing information.");
        });'
            ,array('type' => 'inline', 'scope' => 'footer', 'weight' => 1 ));
        $foo='';
    }
}

<?php
/**
 * @file
 * Code for the FFVCOOP Commerce Init feature.
 */

include_once 'ffvcoop_commerce_init.features.inc';

/*
 * Implements hook_commerce_checkout_complete
 *
 * Set the last order date on user and customer entities
 * If an annual fee is included, set the annual fee date also
 *
 * Also make sure the order pickupdate is current
 */

function ffvcoop_commerce_init_commerce_checkout_complete($order){
    $pickupdate = get_next_pickup_date();
    if ($order->field_week_date['und'][0]['value']<$pickupdate){
        $order->field_week_date['und'][0]['value'] = $pickupdate;
    }

    $annual_fee=FALSE;
  $existingUser = user_load($order->uid);

    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    foreach ($order->commerce_line_items['und'] as $delta => $line_item_wrapper) {
        if($type = get_line_item_type($line_item_wrapper)){
          $product_item = commerce_product_load($type);
          $product_type = $product_item->type;
          if($product_type=='fee'){
              $annual_fee=TRUE;
          }
        }
    }

  $existingUser->field_order_count['und'][0]['value'] = isset($existingUser->field_order_count['und'][0]['value']) ? intval($existingUser->field_order_count['und'][0]['value']) +1: "1";
  $existingUser->field_last_order_date = array(
            'und' => array(
                0 => array(
                    'value' => date('Y-m-d', time()),
                    'timezone' => 'America/New_York',
                    'timezone_db' => 'America/New_York',
                    'date_type' => "datetime",
                ),
            ),
        );
    if($annual_fee) {
        $existingUser->field_annual_fee = array(
            'und' => array(
                0 => array(
                    'value' => date('Y-m-d', time()),
                    'timezone' => 'America/New_York',
                    'timezone_db' => 'America/New_York',
                    'date_type' => "datetime",
                ),
            ),
        );
    }
    field_attach_update('user', $existingUser);
    //user_save((object) array('uid' => $existingUser->uid), (array) $existingUser); USER SAVE F's up pass field


    // update the customer node type also
    $nodeQuery = new EntityFieldQuery();
    $nodeQuery->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'customer')
        ->fieldCondition('field_customer_email','email', $existingUser->mail, '=')
        ->range(0, 1); //limit to one result
    $customer = $nodeQuery->execute();
    if (isset($customer['node'])) {
        $entity_id = array_keys($customer['node']);
        if ($entity_id) {
            $node = node_load($entity_id[0]);
            if($annual_fee) {
                $node->field_annual_fee = $existingUser->field_annual_fee;
            }
            $node->field_last_order_date = $existingUser->field_last_order_date;
            $node->field_user_reference['und'][0]['target_id'] = $existingUser->uid;
            // save node
            node_save($node);
        }
    }
}

/*
 * Implements hook_user_presave
 *
 * When a user is created or updated, check if a customer value already exists,
 * if so, copy values over to the customer and set the relationship
 */
function ffvcoop_commerce_init_user_presave(&$edit, $account, $category){
    //check if customer node exists with same email
    if(!isset($account->mail)){
        $user = user_load($account->uid);
        $account->mail = $user->mail;
    }
    $nodeQuery = new EntityFieldQuery();
    $nodeQuery->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'customer')
        ->fieldCondition('field_customer_email','email', $account->mail, '=')
        ->range(0, 1); //limit to one result
    $customer = $nodeQuery->execute();
    if (isset($customer['node'])) {  // a customer record exists with same email addy
        $entity_id = array_keys($customer['node']);
        if ($entity_id) {
            $node = node_load($entity_id[0]);
            // if a new account add a customer order, copy last order and count over to user($edit).
            if($account->is_new ==TRUE){
            $cust_orders = _get_customer_orders($entity_id[0]);
            $count = count($cust_orders);
            $last_date = _get_last_date($cust_orders);
            $edit['field_order_count']['und'][0]['value'] = $count;
            $edit['field_last_order_date'] = $last_date;
                if($node->field_customer_fee_paid['und'][0]['value'] == "1"){
                    $edit['field_annual_fee']['und'][0] = array(
                        'value' => '2015-03-01 00:00:00',
                        'timezone' => 'America/New_York',
                        'timezone_db' => 'America/New_York',
                        'datetype' => 'datetime',
                    );

                }
            }

            $node->field_customer_email['und'][0]['email'] = $edit['mail'];
            $node->field_annual_fee  = $edit['field_annual_fee'];
            $node->field_last_order_date = $edit['field_last_order_date'];
            $node->title = $edit['field_customer_first_name']['und'][0]['value'];
            $node->field_customer_last_name = $edit['field_customer_last_name'];
            // save node
            node_save($node);
        }
    } else {
      // create a new customer record
        $entity = entity_create('node', array('type' => 'customer'));
        $entity->uid = 1;
        $wrapper = entity_metadata_wrapper('node', $entity);
        $wrapper->title = $edit['field_customer_first_name']['und'][0]['value'];
        $wrapper->field_customer_email = $edit['mail'];
        $wrapper->field_customer_last_name = $edit['field_customer_last_name']['und'][0]['value'];

        // - dont have a UID yet so cant set it here.
        $wrapper->save();


    }
}

/**
 * Implements hook_menu()
 */
function ffvcoop_commerce_init_menu(){
  $items = array();
  $items['manage/weekly-product-report'] = array (
    'title' => 'Weekly Product Report',
    'description' => 'Manage the Pickup Dates calendar',
    'page callback' => 'line_item_report_page',
    'access arguments' => array('access site reports'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function line_item_report_page(){
    $form=drupal_get_form('line_item_date_select_form');
  return '<h2>Weekly Order Summary</h2>' . drupal_render($form) . '<div id="line-item-results"></div>';
}

function line_item_date_select_form($form, &$form_state){
  $form['week_date'] = array(
    '#type' => 'date_popup',
    '#date_format' => 'Y-m-d',
    '#date_year_range' => '-1:+0',
    '#required' => TRUE,
    '#title' => t("Select the Pickup Date"),
  );
    $form['status'] = array(
        '#type' => 'select',
        '#options' => array(
            'canceled' => 'Canceled',
            'cardonfile_charged' => 'Charged',
            'completed' => 'Completed',
            ),
        '#multiple' => true,
        '#required' => FALSE,
        '#title' => t("Select a status"),
    );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#ajax' => array(
      'callback' => 'line_item_date_select_form_submit',
      'wrapper' => 'line-item-results',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

  return $form;
}

function line_item_date_select_form_submit($form, &$form_state){
  $qty=array();
  $report = '<div id="line-item-results"><ul>';
  $query = new EntityFieldQuery();
  $date = strtotime($form_state['values']['week_date']);
  $status = $form_state['values']['status'];
  $query->entityCondition('entity_type', 'commerce_order')
   // ->propertyCondition('status',$status,'=')
    ->fieldCondition('field_week_date', 'value', $date, '=')
    ->addMetaData('account', user_load(1)); // Run the query as user 1.

    if(!empty($status)){
       $query->propertyCondition('status',$status,'IN');
    }
  $result = $query->execute();

  if(isset($result['commerce_order'])){
      $order_ids=array_keys($result['commerce_order']);
      foreach($order_ids as $order_id){
          $wrapper = entity_metadata_wrapper('commerce_order', $order_id);
          $lines = $wrapper->commerce_line_items;
          foreach ($lines as $line_item_wrapper) {
              $bundle = $line_item_wrapper->getBundle();
              if($name = is_line_item_a_product($line_item_wrapper)){
                  //do something
                  $qty[$name] = $qty[$name] + $line_item_wrapper->quantity->value();
              }
          }
      }
  }

    foreach($qty as $title=>$value){
      $report.= '<li class="row-summary">' . $title . ' - <span class="total">' . $value . '</span></li>';
    }
    $count = count($qty);
    if($count<1){
        $report.="There are no Orders matching your search criteria. Please try again.";
    }

  $report .='</ul></div>';
return $report;
}


function is_line_item_a_product($line_item_wrapper){
  $return=NULL;
  if($type = get_line_item_type($line_item_wrapper)){
    $product_item = commerce_product_load($type);
    $product_type = $product_item->type;
   // if($product_type!='product'){
   //   return FALSE;
   // }
    $return= $product_item->title;
  }
  return $return;
}

function get_order_pickup_date($order_id){
  $order = commerce_order_load($order_id);
  if(in_array($order->status, array('charged', 'cardonfile_charged', 'completed', 'pickedup/delivered'))){
  $date = date('Y-m-d', $order->field_week_date['und'][0]['value']);
   return $date;
  }
  return FALSE;
}

/*
 * Hooks commerce_order_presave
 * checks for annual fee date older than 1 year
 * if so, adds new annual fee line item.
 */
function ffvcoop_commerce_init_commerce_cart_product_add($order, $product, $quantity, $line_item) {
    global $user;
    add_fee_to_cart($user, $order);
}

/*
 * helper function to add fee to cart
 *
 * triggered at login and at add to cart
 */
function add_fee_to_cart($user, $order){
    $fee_exists = FALSE;
    if($user->uid > 0) {
        $user_data = user_load($user->uid);
        $fee_date = isset($user_data->field_annual_fee['und']['0']['value'])? $user_data->field_annual_fee['und']['0']['value'] : '2014-1-1 00:00:00';
        $expire = strtotime($fee_date . '+1 year');
        $order_count = isset($user_data->field_order_count['und'][0]['value'])? intval($user_data->field_order_count['und'][0]['value']) : "0" ;
        //make sure there isnt already an annual fee in the cart
        $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
       // foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
        foreach ($order->commerce_line_items['und'] as $delta => $line_item_wrapper) {
            if($type = get_line_item_type($line_item_wrapper)){
              $product_item = commerce_product_load($type);
              $product_type = $product_item->type;
              if($product_type=='fee'){
                  $fee_exists = TRUE;
              }
            }
        }

        if(time() > $expire && $fee_exists == FALSE && $order_count>0){
            // add annual fee
            if($annual_fee = get_fee_products()) {
                $product = commerce_product_load($annual_fee);
                $line_item = commerce_product_line_item_new(commerce_product_load($annual_fee));
                commerce_cart_product_add($user->uid, $line_item);
                drupal_set_message("Your annual Co-op membership fee is due. We have added the fee to your cart for this order.");
            }

        }
    }
}

function get_fee_products(){
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'commerce_product')
        ->entityCondition('bundle', 'fee')
        ->propertyCondition('status', 1)
        ->range(0,1);

    $result = $query->execute();
    if(isset($result['commerce_product'])){
        $entity_ids = array_keys($result['commerce_product']);
        if($entity_ids) {
            return $entity_ids[0];}
        else {
            return FALSE;
        }
    }
}

/*
 * Implements hook_commerce_cart_product_remove($order, $product, $quantity, $line_item)
 *
 * Dont let user's remove the annual fee
 */

function ffvcoop_commerce_init_commerce_cart_product_remove($order, $product, $quantity, $line_item){
    if($product->type == 'fee'){
        drupal_set_message("You can not remove the annual fee from your cart. In order to place an order, you will need to renew your membership by paying the fee.", 'warning');
        $url = $_SERVER['HTTP_REFERER'];
        header('Location:' . $url);
        drupal_exit($url);
    }
}

/*
 * Implements hook form alter
 *
 * move order status to the top of the order edit page
 */

function ffvcoop_commerce_init_form_alter(&$form, &$form_state, $form_id){
    if($form_id == 'commerce_order_ui_order_form' ){
        $form['order_status']['#weight'] = -20;
        $form['order_status']['#group'] = '';
        $form['submit2'] = $form['actions']['submit'];
        $form['submit2']['#weight'] = -19;
    }

}

/*
 * Implements hook user login
 *
 * After a user logs in, check to see if annual fee is due.
 */

function ffvcoop_commerce_init_user_login(&$edit, $account){
    $uid = $account->uid;
    if($cart = commerce_cart_order_load($uid)) {
        $cart_li = count($cart->commerce_line_items);
        if($cart_li > 0) {
            $order = commerce_order_load($cart->order_id);
            add_fee_to_cart($account, $order);
        }
    }
}

/*
 * helper function to load customer_orders by customer entity id
 */

function _get_customer_orders($entity_id){
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'customer_order')
        ->entityCondition('bundle', 'customer_order')
        ->fieldCondition('field_order_customer', 'target_id', $entity_id, '=');

    $result = $query->execute();
    if(isset($result['customer_order'])){
        $entity_ids = array_keys($result['customer_order']);
        if($entity_ids) {
            return $entity_ids;}
        else {
            return NULL;
        }
    }
}

/*
 *  helper function to get a customer order max date
 *
 * used when a new user is created and old customer date is sync'd up
 */

function _get_last_date($cust_orders){
    $dates=array();
    $return=array();
    if(is_array($cust_orders)){
    $ids = array_values($cust_orders);
    $orders = entity_load('customer_order', $ids);
    foreach ($orders as $order) {
        // grab date and add to array
        $dates[] = $order->field_order_date['und'][0]['value'];

    }
    $mostRecent = array('date' => '', 'ts' => 0);
    foreach ($dates as $date) {
        $curDate = strtotime($date);
        if ($curDate > $mostRecent['ts']) {
            $mostRecent['ts'] = $curDate;
            $mostRecent['date'] = $date;
        }
    }
    $return['und'][0]['value'] = $mostRecent['date'];
    $return['und'][0]['timezone'] = 'America/New_York';
    $return['und'][0]['timezone_db'] = 'America/New_York';
    $return['und'][0]['datetype'] = 'datetime';

    return $return;
    }
    else {
        return NULL;
    }
}

function get_line_item_type($line_item_wrapper){
  $product= NULL;
    if(is_array($line_item_wrapper)){
        $line_item_arr = $line_item_wrapper['line_item_id'];
        $line_item = entity_load('commerce_line_item', array($line_item_arr));
        if ($line_item[$line_item_wrapper['line_item_id']]->type == "product") {
            $product = $line_item[$line_item_wrapper['line_item_id']]->commerce_product['und'][0]['product_id'];
        }
    } elseif (is_object($line_item_wrapper)){
        $line_item_arr = $line_item_wrapper->line_item_id->value();
        $line_item = entity_load('commerce_line_item', array($line_item_arr));
        if ($line_item_wrapper->getBundle() == "product") {
            $product = $line_item[$line_item_arr]->commerce_product['und'][0]['product_id'];
        }
    }

    return $product;
 // }
}